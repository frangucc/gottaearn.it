// Prisma schema for GottaEarn.it
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Auth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Core application models
model User {
  id             String    @id @default(cuid())
  email          String    @unique
  emailVerified  DateTime? @map("email_verified")
  name           String?
  image          String?
  role           UserRole  @default(USER)
  hashedPassword String?   @map("hashed_password")
  provider       String?   // oauth provider
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  accounts      Account[]
  sessions      Session[]
  favorites     Product[]      @relation("UserFavorites")
  chatSessions  ChatSession[]
  searchAnalytics SearchAnalytics[]

  @@map("users")
}

model Product {
  id           String   @id @default(cuid())
  asin         String   @unique // Amazon Standard Identification Number
  title        String
  price        Float?
  image        String?
  rating       Float?
  ratingsTotal Int?     @map("ratings_total")
  description  String?  @db.Text
  brand        String?  // Legacy string field for backward compatibility
  brandId      String?  @map("brand_id") // New foreign key to Brand model
  availability String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  brandEntity     Brand?               @relation(fields: [brandId], references: [id], onDelete: SetNull)
  categories      Category[]           @relation("ProductCategories")
  collections     Collection[]         @relation("ProductCollections")
  favoritedBy     User[]              @relation("UserFavorites")
  searchAnalytics SearchAnalytics[]
  rankings        ProductRanking[]
  segments        ProductSegment[]     // AI-assigned segments
  processingJobs  ProductProcessingJob[] // Background processing jobs

  @@map("products")
}

model Category {
  id        String    @id @default(cuid())
  name      String
  ageGroup  AgeGroup  @map("age_group")
  gender    Gender    @default(UNISEX)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  products    Product[]    @relation("ProductCategories")
  collections Collection[] @relation("CategoryCollections")

  @@unique([name, ageGroup, gender])
  @@map("categories")
}

model Collection {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  isPublic    Boolean  @default(true) @map("is_public")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  products   Product[]  @relation("ProductCollections")
  categories Category[] @relation("CategoryCollections")

  @@map("collections")
}

model SearchAnalytics {
  id             String   @id @default(cuid())
  searchTerm     String   @map("search_term")
  userId         String?  @map("user_id")
  resultCount    Int      @map("result_count")
  clickedResults String[] @map("clicked_results") // Array of ASINs
  ageGroup       AgeGroup? @map("age_group")
  gender         Gender?
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  user     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  products Product[] // Products that appeared in search results

  @@map("search_analytics")
}

model ProductRanking {
  id        String   @id @default(cuid())
  productId String   @map("product_id")
  category  String   // Category or collection name
  score     Float    // Reddit-like ranking score
  views     Int      @default(0)
  clicks    Int      @default(0)
  favorites Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, category])
  @@map("product_rankings")
}

model ChatSession {
  id        String      @id @default(cuid())
  userId    String      @map("user_id")
  messages  Json[]      // Array of message objects
  context   Json?       // User context (age, preferences, etc.)
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_sessions")
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique // e.g., "Apple", "Nike", "Samsung"
  displayName String?   // e.g., "Apple Inc."
  description String?   @db.Text
  logoUrl     String?   @map("logo_url")
  websiteUrl  String?   @map("website_url")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  products Product[]

  @@map("brands")
}

// New models for AI-powered segmentation
model Segment {
  id          String    @id @default(cuid())
  name        String    // e.g., "Boys Gaming 13-15", "Girls Fashion 16-18"
  description String?   @db.Text
  ageRange    AgeRange  @map("age_range")
  gender      Gender
  categories  String[]  // Array of category keywords
  keywords    String[]  // AI-identified keywords for this segment
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  productSegments ProductSegment[]

  @@unique([name, ageRange, gender])
  @@map("segments")
}

model ProductSegment {
  id             String  @id @default(cuid())
  productId      String  @map("product_id")
  segmentId      String  @map("segment_id")
  confidence     Float   // AI confidence score (0.0 - 1.0)
  reasoning      String? @db.Text // AI reasoning for assignment
  isManuallySet  Boolean @default(false) @map("is_manually_set")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  segment Segment @relation(fields: [segmentId], references: [id], onDelete: Cascade)

  @@unique([productId, segmentId])
  @@map("product_segments")
}

model ProductProcessingJob {
  id            String           @id @default(cuid())
  productId     String           @map("product_id")
  jobType       String           // "CATEGORIZE", "SEGMENT", "ENRICH"
  status        ProcessingStatus @default(PENDING)
  input         Json?            // Input data for processing
  output        Json?            // Processing results
  error         String?          @db.Text
  attempts      Int              @default(0)
  maxAttempts   Int              @default(3) @map("max_attempts")
  scheduledFor  DateTime?        @map("scheduled_for")
  startedAt     DateTime?        @map("started_at")
  completedAt   DateTime?        @map("completed_at")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_processing_jobs")
}

model RainforestSearchCache {
  id          String   @id @default(cuid())
  searchTerm  String   @map("search_term")
  results     Json     // Cached Rainforest API results
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")

  @@unique([searchTerm])
  @@map("rainforest_search_cache")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum AgeGroup {
  TODDLER    // 1-3 years
  PRESCHOOL  // 4-5 years
  CHILD      // 6-9 years
  TWEEN      // 10-12 years
  TEEN       // 13-17 years
  ADULT      // 18+ years
}

enum AgeRange {
  AGE_10_12  // 10-12 years
  AGE_13_15  // 13-15 years
  AGE_16_18  // 16-18 years
  AGE_19_21  // 19-21 years
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum Gender {
  MALE
  FEMALE
  UNISEX
}
